// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Login/> renders the login form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          Login
        </ForwardRef>,
        false,
        <form>
          <FormikConnect(FieldInner)
            component={[Function]}
            name="username"
          />
          <FormikConnect(FieldInner)
            component={[Function]}
            name="password"
          />
          <ForwardRef
            primary={true}
            type="submit"
          >
            Login
          </ForwardRef>
        </form>,
        <ForwardRef>
          <span>
            Don't have an account? 
          </span>
          <ForwardRef
            to="/signup"
          >
            Sign up
          </ForwardRef>
        </ForwardRef>,
        <ForwardRef>
          <span>
            Forgot your password? 
          </span>
          <ForwardRef
            to="/password-reset"
          >
            Reset password
          </ForwardRef>
        </ForwardRef>,
      ],
      "small": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Login",
        },
        "ref": null,
        "rendered": "Login",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            Object {
              "level": 1,
            },
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-Rmtcm",
            "isStatic": false,
            "rules": Array [
              "
  ",
              "
  color: ",
              [Function],
              ";
  font-size: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  line-height: ",
              [Function],
              ";
  ",
              [Function],
              ";
",
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-Rmtcm",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FormikConnect(FieldInner)
              component={[Function]}
              name="username"
            />,
            <FormikConnect(FieldInner)
              component={[Function]}
              name="password"
            />,
            <ForwardRef
              primary={true}
              type="submit"
            >
              Login
            </ForwardRef>,
          ],
          "onSubmit": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "component": [Function],
              "name": "username",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "component": [Function],
              "name": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Login",
              "primary": true,
              "type": "submit",
            },
            "ref": null,
            "rendered": "Login",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                Object {
                  "type": "button",
                },
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kgoBCf",
                "isStatic": false,
                "rules": Array [
                  "
  background: ",
                  [Function],
                  ";
  border: ",
                  [Function],
                  " ",
                  [Function],
                  " ",
                  [Function],
                  ";
  border-radius: ",
                  [Function],
                  ";
  color: ",
                  [Function],
                  ";
  font-family: ",
                  [Function],
                  ";
  font-size: ",
                  [Function],
                  ";
  line-height: calc(",
                  [Function],
                  " * 3);
  min-width: calc(",
                  [Function],
                  " * 12);
  padding: ",
                  [Function],
                  ";

  &:focus,
  &:hover {
    background-color: ",
                  [Function],
                  ";
    transition: ",
                  [Function],
                  " ",
                  [Function],
                  ";
  }

  &:active {
    background-color: ",
                  [Function],
                  ";
  }

  &[disabled] {
    cursor: not-allowed;
    opacity: 0.5;

    &:focus,
    &:hover,
    &:active {
      background: ",
                  [Function],
                  ";
    }
  }

  ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.button",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kgoBCf",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <span>
              Don't have an account? 
            </span>,
            <ForwardRef
              to="/signup"
            >
              Sign up
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Don't have an account? ",
            },
            "ref": null,
            "rendered": "Don't have an account? ",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Sign up",
              "to": "/signup",
            },
            "ref": null,
            "rendered": "Sign up",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-csuQGl",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  cursor: pointer;

  ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "Styled(Link)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-csuQGl",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gwVKww",
            "isStatic": true,
            "rules": Array [],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gwVKww",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <span>
              Forgot your password? 
            </span>,
            <ForwardRef
              to="/password-reset"
            >
              Reset password
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Forgot your password? ",
            },
            "ref": null,
            "rendered": "Forgot your password? ",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Reset password",
              "to": "/password-reset",
            },
            "ref": null,
            "rendered": "Reset password",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-csuQGl",
                "isStatic": false,
                "rules": Array [
                  "
  color: ",
                  [Function],
                  ";
  cursor: pointer;

  ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "Styled(Link)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-csuQGl",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-hXRMBi",
            "isStatic": true,
            "rules": Array [],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-hXRMBi",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-eqIVtm",
        "isStatic": false,
        "rules": Array [
          "
  margin: 0 auto;
  width: ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "propTypes": Object {
        "medium": [Function],
        "small": [Function],
      },
      "render": [Function],
      "styledComponentId": "sc-eqIVtm",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            Login
          </ForwardRef>,
          false,
          <form>
            <FormikConnect(FieldInner)
              component={[Function]}
              name="username"
            />
            <FormikConnect(FieldInner)
              component={[Function]}
              name="password"
            />
            <ForwardRef
              primary={true}
              type="submit"
            >
              Login
            </ForwardRef>
          </form>,
          <ForwardRef>
            <span>
              Don't have an account? 
            </span>
            <ForwardRef
              to="/signup"
            >
              Sign up
            </ForwardRef>
          </ForwardRef>,
          <ForwardRef>
            <span>
              Forgot your password? 
            </span>
            <ForwardRef
              to="/password-reset"
            >
              Reset password
            </ForwardRef>
          </ForwardRef>,
        ],
        "small": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Login",
          },
          "ref": null,
          "rendered": "Login",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [
              Object {
                "level": 1,
              },
            ],
            "componentStyle": ComponentStyle {
              "componentId": "sc-Rmtcm",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  color: ",
                [Function],
                ";
  font-size: ",
                [Function],
                ";
  font-family: ",
                [Function],
                ";
  line-height: ",
                [Function],
                ";
  ",
                [Function],
                ";
",
                ";
  ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.h1",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-Rmtcm",
            "target": "h1",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FormikConnect(FieldInner)
                component={[Function]}
                name="username"
              />,
              <FormikConnect(FieldInner)
                component={[Function]}
                name="password"
              />,
              <ForwardRef
                primary={true}
                type="submit"
              >
                Login
              </ForwardRef>,
            ],
            "onSubmit": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "component": [Function],
                "name": "username",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "component": [Function],
                "name": "password",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Login",
                "primary": true,
                "type": "submit",
              },
              "ref": null,
              "rendered": "Login",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "type": "button",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-kgoBCf",
                  "isStatic": false,
                  "rules": Array [
                    "
  background: ",
                    [Function],
                    ";
  border: ",
                    [Function],
                    " ",
                    [Function],
                    " ",
                    [Function],
                    ";
  border-radius: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  line-height: calc(",
                    [Function],
                    " * 3);
  min-width: calc(",
                    [Function],
                    " * 12);
  padding: ",
                    [Function],
                    ";

  &:focus,
  &:hover {
    background-color: ",
                    [Function],
                    ";
    transition: ",
                    [Function],
                    " ",
                    [Function],
                    ";
  }

  &:active {
    background-color: ",
                    [Function],
                    ";
  }

  &[disabled] {
    cursor: not-allowed;
    opacity: 0.5;

    &:focus,
    &:hover,
    &:active {
      background: ",
                    [Function],
                    ";
    }
  }

  ",
                    [Function],
                    ";
  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-kgoBCf",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <span>
                Don't have an account? 
              </span>,
              <ForwardRef
                to="/signup"
              >
                Sign up
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Don't have an account? ",
              },
              "ref": null,
              "rendered": "Don't have an account? ",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Sign up",
                "to": "/signup",
              },
              "ref": null,
              "rendered": "Sign up",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-csuQGl",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    ";
  cursor: pointer;

  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "Styled(Link)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-csuQGl",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gwVKww",
              "isStatic": true,
              "rules": Array [],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gwVKww",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <span>
                Forgot your password? 
              </span>,
              <ForwardRef
                to="/password-reset"
              >
                Reset password
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Forgot your password? ",
              },
              "ref": null,
              "rendered": "Forgot your password? ",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Reset password",
                "to": "/password-reset",
              },
              "ref": null,
              "rendered": "Reset password",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-csuQGl",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    ";
  cursor: pointer;

  ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "Styled(Link)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-csuQGl",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hXRMBi",
              "isStatic": true,
              "rules": Array [],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hXRMBi",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-eqIVtm",
          "isStatic": false,
          "rules": Array [
            "
  margin: 0 auto;
  width: ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "medium": [Function],
          "small": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-eqIVtm",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
